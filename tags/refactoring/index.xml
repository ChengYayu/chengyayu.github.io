<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Refactoring on Negentropy</title>
    <link>https://chengyayu.github.io/tags/refactoring/</link>
    <description>Recent content in Refactoring on Negentropy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 19 Nov 2020 01:08:43 +0800</lastBuildDate><atom:link href="https://chengyayu.github.io/tags/refactoring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>低层级重构基本手法</title>
      <link>https://chengyayu.github.io/posts/%E4%BD%8E%E5%B1%82%E7%BA%A7%E9%87%8D%E6%9E%84%E5%9F%BA%E6%9C%AC%E6%89%8B%E6%B3%95/</link>
      <pubDate>Thu, 19 Nov 2020 01:08:43 +0800</pubDate>
      
      <guid>https://chengyayu.github.io/posts/%E4%BD%8E%E5%B1%82%E7%BA%A7%E9%87%8D%E6%9E%84%E5%9F%BA%E6%9C%AC%E6%89%8B%E6%B3%95/</guid>
      <description>什么是好代码的特征 评价代码好坏，如同审美，不仅关乎个人品味，而且存在客观标准。 好的代码直接了当，如果需要被修改，能让“修理工”轻易找到修改点，并且快速做出更改，同时不易引入其他错误。 检验标准可以归纳成 ETC（Easy To Change）原则，就是人们是否能轻而易举地修改它。
遗憾的是，我们面对不断变化的业务需求很难一步到位。只能快速实现，时时修缮，以期达到小步快跑的节奏感。
何为重构 在不改变软件可观察行为的前提下，调整其结构。使之无限接近 ETC。
 可被测试是否影响软件原有行为 人类肉眼可见的结构变动 更加 ETC  何时重构 杀人动机是什么？
 预备性重构：添加新功能很费劲 帮助理解的重构：代码看不懂 捡垃圾式重构：代码能看懂，但是烂 长期重构：每次改一点，就算改个名字也是好的 不重构：不需要理解则不必重构  重构的挑战 不是人家不想，是人家不能。
 延缓新功能开发 遗留代码 代码所有权* 测试* 独立系统（数据库）*  尺度大一点
 是不是不需要做架构了？渐进式架构乌托邦 无限增加可读性会不会影响性能？可能会，但道就是道。  代码坏味道 以貌取人是一种歧视，但是也给人类带来了效率。
 神秘命名 重复代码 过长函数 过长参数列表 全局数据 可变数据 发散式变化 霰弹式修改 依恋情结 数据泥团 原语偏执 重复的 switch 循环语句 冗赘元素 夸夸其谈通用性 临时字段 过长的消息链 中间人 内幕交易 过大的类 异曲同工的类 纯数据类 被拒绝的馈赠 注释  todo why    重构基本手法   提炼函数（Extract Function）</description>
    </item>
    
  </channel>
</rss>
